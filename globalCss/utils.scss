@use "sass:map";
@use "./theme.scss" as *;


@function add-alpha($color, $alpha) {
  @return rgba($color, $alpha);
}

@mixin glass($color: currentColor, $alpha-bg: 0.15, $alpha-shadow: 0.6, $blur: 8px) {
  @if $color == currentColor {
    background: color-mix(in srgb, transparent, currentColor $alpha-bg * 100%);
    box-shadow: inset 0 0 15px color-mix(in srgb, transparent, currentColor $alpha-shadow * 100%);
    border-color: color-mix(in srgb, transparent, currentColor 30%);
  } @else {
    background: add-alpha($color, $alpha-bg);
    box-shadow: inset 0 0 15px add-alpha($color, $alpha-shadow);
    border-color: add-alpha($color, 0.3);
  }

  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

@mixin glass-active($color: currentColor, $alpha-bg: 0.15, $alpha-shadow: 0.6, $blur: 8px) {
  @if $color == currentColor {
    border-color: color-mix(in srgb, transparent, currentColor 100%);
    background: color-mix(in srgb, transparent, currentColor $alpha-bg * 100%);
    box-shadow:
      inset 0 0 15px color-mix(in srgb, transparent, currentColor $alpha-shadow * 100%),
      0 0 10px color-mix(in srgb, transparent, currentColor 100%);
  } @else {
    border-color: add-alpha($color, 1);
    background: add-alpha($color, $alpha-bg);
    box-shadow:
      inset 0 0 15px add-alpha($color, $alpha-shadow),
      0 0 10px add-alpha($color, 1);
  }

  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

@mixin for-screen($size) {
  $bp: map.get($breakpoints, $size);
  @if $bp == null {
    @error "Unknown breakpoint `#{$size}` in $breakpoints map.";
  }

  @media (width >= #{$bp}) {
    @content;
  }
}
